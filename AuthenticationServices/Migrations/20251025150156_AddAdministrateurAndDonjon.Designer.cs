// <auto-generated />
using System;
using AuthenticationServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthenticationServices.Migrations
{
    [DbContext(typeof(AventureDbContext))]
    [Migration("20251025150156_AddAdministrateurAndDonjon")]
    partial class AddAdministrateurAndDonjon
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Administrateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomUtilisateur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Administrateurs");
                });

            modelBuilder.Entity("Models.Donjon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NombreDeSalles")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Donjons");
                });

            modelBuilder.Entity("Models.Joueur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdministrateurId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DerniereConnexion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PeutReprendrePartie")
                        .HasColumnType("boolean");

                    b.Property<int>("ScoreTotal")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdministrateurId");

                    b.ToTable("Joueurs");
                });

            modelBuilder.Entity("Models.Partie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DonjonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EstTerminee")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JoueurId")
                        .HasColumnType("uuid");

                    b.Property<int>("ScoreFinal")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonjonId");

                    b.HasIndex("JoueurId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Models.Salle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ChoixFait")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("ChoixPossible")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DonjonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Niveau")
                        .HasColumnType("integer");

                    b.Property<Guid>("PartieId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DonjonId");

                    b.HasIndex("PartieId");

                    b.ToTable("Salles");
                });

            modelBuilder.Entity("Models.Joueur", b =>
                {
                    b.HasOne("Models.Administrateur", null)
                        .WithMany("JoueursSupervises")
                        .HasForeignKey("AdministrateurId");
                });

            modelBuilder.Entity("Models.Partie", b =>
                {
                    b.HasOne("Models.Donjon", "Donjon")
                        .WithMany("Parties")
                        .HasForeignKey("DonjonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Joueur", "Joueur")
                        .WithMany("Historique")
                        .HasForeignKey("JoueurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donjon");

                    b.Navigation("Joueur");
                });

            modelBuilder.Entity("Models.Salle", b =>
                {
                    b.HasOne("Models.Donjon", "Donjon")
                        .WithMany("Salles")
                        .HasForeignKey("DonjonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Partie", "Partie")
                        .WithMany("Salles")
                        .HasForeignKey("PartieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Models.ActionResultat", "Resultat", b1 =>
                        {
                            b1.Property<Guid>("SalleId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Action")
                                .HasColumnType("integer");

                            b1.Property<bool>("EstPiege")
                                .HasColumnType("boolean");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Points")
                                .HasColumnType("integer");

                            b1.HasKey("SalleId");

                            b1.ToTable("Salles");

                            b1.WithOwner()
                                .HasForeignKey("SalleId");
                        });

                    b.Navigation("Donjon");

                    b.Navigation("Partie");

                    b.Navigation("Resultat");
                });

            modelBuilder.Entity("Models.Administrateur", b =>
                {
                    b.Navigation("JoueursSupervises");
                });

            modelBuilder.Entity("Models.Donjon", b =>
                {
                    b.Navigation("Parties");

                    b.Navigation("Salles");
                });

            modelBuilder.Entity("Models.Joueur", b =>
                {
                    b.Navigation("Historique");
                });

            modelBuilder.Entity("Models.Partie", b =>
                {
                    b.Navigation("Salles");
                });
#pragma warning restore 612, 618
        }
    }
}
